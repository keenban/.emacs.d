#+title: my emacs configuration
#+author: Keenan Salandy
#+PROPERTY: header-args :tangle yes :mkdirp yes
#+tangle: ~/.emacs.d/init.el
* package management
** exwm
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package exwm
    :ensure nil
    :config
    ;; set the initial workspace number.
    (setq exwm-workspace-number 1)
    ;; make class name the buffer name.
    (add-hook 'exwm-update-class-hook
              (lambda () (exwm-workspace-rename-buffer exwm-class-name)))
    ;; global keybindings
    ;; emacs passthrough
    (setq exwm-input-prefix-keys
  	'(?\C-x
            ?\C-u
            ?\C-h
            ?\M-x
            ?\M-`
            ?\M-&
            ?\M-:
            ?\C-\M-j  ;; Buffer list
            ?\C-\ ))  ;; Ctrl+Space
    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)
    ;; workspace
    (setq exwm-input-global-keys
  	`(([?\s-r] . exwm-reset) ;; s-r: Reset (to line-mode).
  	  ([?\s-w] . exwm-workspace-switch) ;; s-w: Switch workspace.
  	  ([?\s-&] . (lambda (cmd) ;; s-&: Launch application.
                         (interactive (list (read-shell-command "$ ")))
                         (start-process-shell-command cmd nil cmd)))
  	  ([?\s-f] . (lambda () ;; s-f: Launch firefox.
                         (interactive)
                         (start-process-shell-command "firefox-bin" nil "firefox-bin")))
  	  ([?\s-t] . (lambda () ;; s-t: Launch terminal.
                         (interactive)
                         (start-process-shell-command "st" nil "st")))
            ;; s-N: Switch to certain workspace.
            ,@(mapcar (lambda (i)
  		      `(,(kbd (format "s-%d" i)) .
  			(lambda ()
        			  (interactive)
  			  (exwm-workspace-switch-create ,i))))
  		    (number-sequence 0 9))))
    ;; brightness
    (exwm-input-set-key (kbd "<XF86MonBrightnessDown>")
  		      (lambda () (interactive) (shell-command "xbacklight -dec 5")))
    (exwm-input-set-key (kbd "<XF86MonBrightnessUp>")
  		      (lambda () (interactive) (shell-command "xbacklight -inc 5")))
    ;; volume
    (exwm-input-set-key (kbd "<XF86AudioLowerVolume>")
  		      (lambda () (interactive) (shell-command "pactl set-sink-volume @DEFAULT_SINK@ -5%")))
    (exwm-input-set-key (kbd "<XF86AudioRaiseVolume>")
  		      (lambda () (interactive) (shell-command "pactl set-sink-volume @DEFAULT_SINK@ +5%")))
    (exwm-input-set-key (kbd "<XF86AudioMute>")
  		      (lambda () (interactive) (shell-command "pactl set-sink-mute @DEFAULT_SINK@ toggle")))
    ;; start exwm
    (exwm-wm-mode))
#+END_SRC
** hyperbole
#+BEGIN_SRC emacs-lisp
  (use-package hyperbole
    :ensure t)
#+END_SRC
** eat
#+BEGIN_SRC emacs-lisp 
  (use-package eat
    :ensure t
    :config
    (setq eat-term-terminfo "xterm-256color")
    :bind
    (("C-c RET" . eat)))
#+END_SRC
** markdown-mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode)
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp 
  (use-package yasnippet
    :ensure t
    :init
    (setq yas-snippet-dir "~/.emacs.d/snippets")
    :config
    (yas-global-mode))
#+END_SRC
** vertico
#+BEGIN_SRC emacs-lisp 
  (use-package vertico
    :ensure t
    :init
    (vertico-mode))
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp 
  (use-package magit
    :ensure t)
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC
** org
#+BEGIN_SRC emacs-lisp 
  (use-package org
    :bind
    (("C-c l" . org-store-link)
     ("C-c a" . org-agenda))
    :config
    (setq org-log-done t))
#+END_SRC
** denote
#+BEGIN_SRC emacs-lisp 
  (use-package denote
    :ensure t
    :hook (dired-mode . denote-dired-mode)
    :bind
    (("C-c n n" . denote)
     ("C-c n r" . denote-rename-file)
     ("C-c n l" . denote-link)
     ("C-c n b" . denote-backlinks)
     ("C-c n d" . denote-dired)
     ("C-c n g" . denote-grep))
    :config
    (setq denote-directory (expand-file-name "~/dox/notes/"))
    (denote-rename-buffer-mode 1))
  (use-package denote-org
    :ensure t)
#+END_SRC
** nov.el
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+END_SRC
** pdf-tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t)
#+END_SRC
** mu4e
#+BEGIN_SRC emacs-lisp 
  (use-package mu4e
    :ensure nil
    :load-path "/usr/share/emacs/site-lisp/mu4e/"
    
    :config
    ;; this is set to 't' to avoid mail syncing issues when using mbsync
    (setq mu4e-change-filenames-when-moving t)
    
    ;; refresh mail using isync every 10 minutes
    (setq mu4e-update-interval (* 10 60))
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-maildir "~/.mail/gmail")

    ;; set folders
    (setq mu4e-drafts-folder "/[Gmail]/Drafts")
    (setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
    (setq mu4e-refile-folder "/[Gmail]/All Mail")
    (setq mu4e-trash-folder  "/[Gmail]/Trash")

    ;; mailbox shortcuts
    (setq mu4e-maildir-shortcuts
  	'(("/Inbox"             . ?i)
            ("/[Gmail]/Sent Mail" . ?s)
            ("/[Gmail]/Trash"     . ?t)
            ("/[Gmail]/Drafts"    . ?d)
            ("/[Gmail]/All Mail"  . ?a)))
    :bind
    ("C-c m" . mu4e))
#+END_SRC
** eww
#+BEGIN_SRC emacs-lisp 
  (use-package eww
    :ensure t
    :bind
    (("C-c w" . eww)))
#+END_SRC
* functions
#+BEGIN_SRC emacs-lisp 
  (defun open-init-file () (interactive) (find-file user-init-file))
  (defun open-xinitrc () (interactive) (find-file "~/.xinitrc"))
  (defun open-bashrc () (interactive) (find-file "~/.bashrc"))
#+END_SRC
* keybinds
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key [remap list-buffers] 'ibuffer)
  (global-set-key (kbd "C-c r") 'eval-region)
#+END_SRC
** edit file
#+BEGIN_SRC emacs-lisp 
  (global-set-key (kbd "C-c e i") 'open-init-file)
  (global-set-key (kbd "C-c e x") 'open-xinitrc)
  (global-set-key (kbd "C-c e b") 'open-bashrc)
#+END_SRC
* variables
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/dox/notes/20250707T180240--agenda__agenda.org"))
  (setq-default dired-listing-switches "--all --color=auto --human-readable -l")
  (setq left-margin-width 5)
  (set-frame-font "JetBrains Mono 14" nil t)
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+END_SRC
* modes
#+BEGIN_SRC emacs-lisp 
  (column-number-mode)
#+END_SRC
