#+title: my emacs configuration
#+author: Keenan Salandy
#+PROPERTY: header-args :tangle yes :mkdirp yes
#+tangle: ~/.emacs.d/init.el
* window manager
** require exwm
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'exwm)
#+END_SRC
** set the initial workspace number.
#+BEGIN_SRC emacs-lisp :tangle yes
(setq exwm-workspace-number 1)
#+END_SRC
** make class name the buffer name.
#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'exwm-update-class-hook
	  (lambda () (exwm-workspace-rename-buffer exwm-class-name)))
#+END_SRC
** global keybindings
*** emacs passthrough
#+BEGIN_SRC emacs-lisp :tangle yes
(setq exwm-input-prefix-keys
      '(?\C-x
	?\C-u
	?\C-h
	?\M-x
	?\M-`
	?\M-&
	?\M-:
	?\C-\M-j  ;; Buffer list
	?\C-\ ))  ;; Ctrl+Space
(define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)
#+END_SRC
*** workspace
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq exwm-input-global-keys
        `(([?\s-r] . exwm-reset) ;; s-r: Reset (to line-mode).
          ([?\s-w] . exwm-workspace-switch) ;; s-w: Switch workspace.
          ([?\s-&] . (lambda (cmd) ;; s-&: Launch application.
                       (interactive (list (read-shell-command "$ ")))
                       (start-process-shell-command cmd nil cmd)))
          ([?\s-f] . (lambda () ;; s-f: Launch firefox.
                       (interactive)
                       (start-process-shell-command "firefox-bin" nil "firefox-bin")))
          ([?\s-t] . (lambda () ;; s-t: Launch terminal.
                       (interactive)
                       (start-process-shell-command "st" nil "st")))
          ;; s-N: Switch to certain workspace.
          ,@(mapcar (lambda (i)
                      `(,(kbd (format "s-%d" i)) .
                        (lambda ()
                          (interactive)
                          (exwm-workspace-switch-create ,i))))
                    (number-sequence 0 9))))
#+END_SRC
*** brightness
#+BEGIN_SRC emacs-lisp :tangle yes
(exwm-input-set-key (kbd "<XF86MonBrightnessDown>")
                    (lambda () (interactive) (shell-command "xbacklight -dec 5")))
(exwm-input-set-key (kbd "<XF86MonBrightnessUp>")
                    (lambda () (interactive) (shell-command "xbacklight -inc 5")))
#+END_SRC
*** volume
#+BEGIN_SRC emacs-lisp :tangle yes
(exwm-input-set-key (kbd "<XF86AudioLowerVolume>")
                    (lambda () (interactive) (shell-command "pactl set-sink-volume @DEFAULT_SINK@ -5%")))
(exwm-input-set-key (kbd "<XF86AudioRaiseVolume>")
                    (lambda () (interactive) (shell-command "pactl set-sink-volume @DEFAULT_SINK@ +5%")))
(exwm-input-set-key (kbd "<XF86AudioMute>")
                    (lambda () (interactive) (shell-command "pactl set-sink-mute @DEFAULT_SINK@ toggle")))
#+END_SRC
** start exwm
#+BEGIN_SRC emacs-lisp :tangle yes
(exwm-wm-mode)
#+END_SRC
* note taking
** org
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org
    :bind
    (("C-c l" . org-store-link)
     ("C-c a" . org-agenda))
    :config
    (setq org-log-done t))
#+END_SRC

** denote
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package denote
    :ensure t
    :hook (dired-mode . denote-dired-mode)
    :bind
    (("C-. n n" . denote)
     ("C-. n r" . denote-rename-file)
     ("C-. n l" . denote-link)
     ("C-. n b" . denote-backlinks)
     ("C-. n d" . denote-dired)
     ("C-. n g" . denote-grep))
    :config
    (setq denote-directory (expand-file-name "~/dox/notes/"))
    (denote-rename-buffer-mode 1))
  (use-package denote-org)
#+END_SRC
  
* yasnippet
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yasnippet
    :ensure t
    :init
    (setq yas-snippet-dir "~/.emacs.d/snippets")
    :config
    (yas-global-mode))
#+END_SRC
* terminal
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package eat
  :config
  (setq eat-term-terminfo "xterm-256color")
  :bind
  (("C-. t" . eat)))
#+END_SRC
* vertico
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package vertico
  :init
  (vertico-mode))
#+END_SRC

* magit
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package magit
  :bind
  (("C-. g" . magit)))
#+END_SRC

* hyperbole
#+BEGIN_SRC emacs-lisp
  (use-package hyperbole)
#+END_SRC
* oauth
#+BEGIN_SRC emacs-lisp
  (use-package oauth2)
#+END_SRC
* markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode)
#+END_SRC
* pinentry
#+BEGIN_SRC emacs-lisp
  (use-package pinentry)
#+END_SRC
* media
** reading
*** novel
#+BEGIN_SRC emacs-lisp
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+END_SRC
*** calibre
#+BEGIN_SRC emacs-lisp
(setq sql-sqlite-program "/usr/bin/sqlite3") ;; for emacs < 29 or no sqlite built-in emacs
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package calibredb
  :defer t
  :config
  (setq calibredb-root-dir "~/dox/calibre")
  ;; for folder driver metadata: it should be .metadata.calibre
  (setq calibredb-db-dir (expand-file-name "metadata.db" calibredb-root-dir))
  (setq calibredb-library-alist '(("~/dox/calibre" (name . "Calibre"))))) ;; with name
#+END_SRC
*** pdf
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools)
#+END_SRC
*** wiki
#+BEGIN_SRC emacs-lisp
  (use-package kiwix)
#+END_SRC
*** email
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package mu4e
  :ensure nil
  :load-path "/usr/share/emacs/site-lisp/mu4e/"
  
  :config
  ;; This is set to 't' to avoid mail syncing issues when using mbsync
  (setq mu4e-change-filenames-when-moving t)
  
  ;; Refresh mail using isync every 10 minutes
  (setq mu4e-update-interval (* 10 60))
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-maildir "~/.mail/gmail")
  
  (setq mu4e-drafts-folder "/[Gmail]/Drafts")
  (setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
  (setq mu4e-refile-folder "/[Gmail]/All Mail")
  (setq mu4e-trash-folder  "/[Gmail]/Trash")
  
  (setq mu4e-maildir-shortcuts
	'(("/Inbox"             . ?i)
          ("/[Gmail]/Sent Mail" . ?s)
          ("/[Gmail]/Trash"     . ?t)
          ("/[Gmail]/Drafts"    . ?d)
          ("/[Gmail]/All Mail"  . ?a))))
#+END_SRC

*** web
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package eww
  :ensure t
  :bind
  (("C-. w" . eww)))
#+END_SRC

** video
#+BEGIN_SRC emacs-lisp
  (use-package emms)
#+END_SRC
* custom
** functions
#+BEGIN_SRC emacs-lisp :tangle yes
(defun open-init-file () (interactive) (find-file user-init-file))
(defun open-xinitrc () (interactive) (find-file "~/.xinitrc"))
(defun open-bashrc () (interactive) (find-file "~/.bashrc"))
#+END_SRC
** keybinds
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key [remap list-buffers] 'ibuffer)
#+END_SRC
*** edit file
#+BEGIN_SRC emacs-lisp :tangle yes
(global-set-key (kbd "C-. e i") 'open-init-file)
(global-set-key (kbd "C-. e x") 'open-xinitrc)
(global-set-key (kbd "C-. e b") 'open-bashrc)
#+END_SRC
** variables
#+BEGIN_SRC emacs-lisp
(setq-default dired-listing-switches "--all --color=auto --human-readable -l")
#+END_SRC
** modes
#+BEGIN_SRC emacs-lisp :tangle yes
  (which-key-mode)
  (column-number-mode)
#+END_SRC
* melpa
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
#+END_SRC
