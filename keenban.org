#+title: my emacs configuration
#+author: Keenan Salandy
#+PROPERTY: header-args :tangle yes :mkdirp yes
* initialization
#+BEGIN_SRC emacs-lisp :tangle early-init.el
  (setq inhibit-splash-screen t
        inhibit-startup-screen t
        inhibit-startup-message t
        inhibit-startup-echo-area-message t
        inhibit-startup-buffer-menu t
        menu-bar-mode nil
        tool-bar-mode nil
        tooltip-mode nil)
  (set-scroll-bar-mode nil)
#+END_SRC
* utilities
** system
emacs integrations with system utilities
*** window manager
exwm configuration for using emacs as x window manager
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-window.el
  (use-package exwm
    :ensure nil
    :config
    ;; set the initial workspace number.
    (setq exwm-workspace-number 1)
    ;; make class name the buffer name.
    (add-hook 'exwm-update-class-hook
  	    (lambda () (exwm-workspace-rename-buffer exwm-class-name)))
    ;; global keybindings
    ;; emacs passthrough
    (setq exwm-input-prefix-keys
  	'(?\C-x
  	  ?\C-u
  	  ?\C-h
  	  ?\M-x
  	  ?\M-`
  	  ?\M-&
  	  ?\M-:
  	  ?\C-\M-j  ;; Buffer list
  	  ?\C-\ ))  ;; Ctrl+Space
    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)
    ;; workspace
    (setq exwm-input-global-keys
  	`(([?\s-r] . exwm-reset) ;; s-r: Reset (to line-mode).
  	  ([?\s-w] . exwm-workspace-switch) ;; s-w: Switch workspace.
  	  ([?\s-&] . (lambda (cmd) ;; s-&: Launch application.
  			 (interactive (list (read-shell-command "$ ")))
  			 (start-process-shell-command cmd nil cmd)))
  	  ([?\s-f] . (lambda () ;; s-f: Launch firefox.
  			 (interactive)
  			 (start-process-shell-command "firefox-bin" nil "firefox-bin")))
  	  ([?\s-t] . (lambda () ;; s-t: Launch terminal.
  			 (interactive)
  			 (start-process-shell-command "st" nil "st")))
  	    ;; s-N: Switch to certain workspace.
  	    ,@(mapcar (lambda (i)
  		`(,(kbd (format "s-%d" i)) .
  	      (lambda ()
  				  (interactive)
  		(exwm-workspace-switch-create ,i))))
  	      (number-sequence 0 9))))
    ;; brightness
    (exwm-input-set-key (kbd "<XF86MonBrightnessDown>")
  		(lambda () (interactive) (shell-command "xbacklight -dec 5")))
    (exwm-input-set-key (kbd "<XF86MonBrightnessUp>")
  		(lambda () (interactive) (shell-command "xbacklight -inc 5")))
    ;; volume
    (exwm-input-set-key (kbd "<XF86AudioLowerVolume>")
  		(lambda () (interactive) (shell-command "pactl set-sink-volume @DEFAULT_SINK@ -5%")))
    (exwm-input-set-key (kbd "<XF86AudioRaiseVolume>")
  		(lambda () (interactive) (shell-command "pactl set-sink-volume @DEFAULT_SINK@ +5%")))
    (exwm-input-set-key (kbd "<XF86AudioMute>")
  		(lambda () (interactive) (shell-command "pactl set-sink-mute @DEFAULT_SINK@ toggle")))
    ;; start exwm
    (exwm-wm-mode))

  (provide 'keenban-window)
#+END_SRC
*** media
emms configuration for using emacs to play with mpv and mpd
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-media.el
  (use-package emms
    :ensure t
    :config
    (emms-all)
    (setq emms-player-list '(emms-player-mpv)
  	  emms-info-functions '(emms-info-native)))
#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-media.el
    (provide 'keenban-media)
#+END_SRC 
*** files
dired configuration
#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq-default dired-listing-switches "--all --color=auto --human-readable -l")
#+END_SRC
** speech
#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package emacspeak
  (load-file "/usr/share/emacs/site-lisp/emacspeak/lisp/emacspeak-setup.el")
  (setq emacspeak-epub-library-directory "/home/keenban/media/doc/book/"
        emacspeak-epub-bookshelf-directory "/home/keenban/media/doc/book/bsf/"
        emacspeak-epub-db-file "/home/keenban/media/doc/book/.bookshelf.bsf")
#+END_SRC
** mail
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-mail.el
  (use-package mu4e
    :ensure nil
    :load-path "/usr/share/emacs/site-lisp/mu4e/"

    :config
    ;; this is set to 't' to avoid mail syncing issues when using mbsync
    (setq mu4e-change-filenames-when-moving t)

    ;; refresh mail using isync every 10 minutes
    (setq mu4e-update-interval (* 10 60))
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-maildir "~/.mail/gmail")

    ;; set folders
    (setq mu4e-drafts-folder "/[Gmail]/Drafts")
    (setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
    (setq mu4e-refile-folder "/[Gmail]/All Mail")
    (setq mu4e-trash-folder  "/[Gmail]/Trash")

    ;; mailbox shortcuts
    (setq mu4e-maildir-shortcuts
  	'(("/Inbox"             . ?i)
	    ("/[Gmail]/Sent Mail" . ?s)
	    ("/[Gmail]/Trash"     . ?t)
	    ("/[Gmail]/Drafts"    . ?d)
	    ("/[Gmail]/All Mail"  . ?a)))
    :bind
    ("C-c m" . mu4e))

  (provide 'keenban-mail)
#+END_SRC
** org
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-org.el
  (use-package org
    :ensure nil
    :defer t
    :mode ("\\.org\\'" . org-mode)
    :bind
    (("C-c l" . org-store-link)
     ("C-c a" . org-agenda))
    :config
    (setq
     ;; start collapsed
     org-startup-folded t

     ;; respect headings
     org-insert-heading-respect-content t)

     (setq org-log-done t)
     (setq org-agenda-files '("~/media/doc/notes/20250707T180240--agenda__agenda.org"))
     (define-abbrev org-mode-abbrev-table "kel" "#+BEGIN_SRC emacs-lisp")
     (define-abbrev org-mode-abbrev-table "kend" "#+END_SRC"))

    (provide 'keenban-org)
#+END_SRC
*** denote
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-denote.el
  (use-package denote
    :ensure t
    :hook (dired-mode . denote-dired-mode)
    :bind
    (("C-c n n" . denote)
     ("C-c n r" . denote-rename-file)
     ("C-c n l" . denote-link)
     ("C-c n b" . denote-backlinks)
     ("C-c n d" . denote-dired)
     ("C-c n g" . denote-grep))
    :config
    (setq denote-directory (expand-file-name "~/media/doc/notes/"))
    (denote-rename-buffer-mode 1))
  (use-package denote-org
    :ensure t)

  (provide 'keenban-denote)
#+END_SRC
** minibuffer
taken from protesilaos basic configuration
*** vertico
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-minibuffer.el
  (use-package vertico
    :ensure t
    :hook (after-init . vertico-mode))
#+END_SRC
*** marginalia
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-minibuffer.el
  (use-package marginalia
    :ensure t
    :hook (after-init . marginalia-mode))
#+END_SRC
*** orderless
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-minibuffer.el
  (use-package orderless
    :ensure t
    :config
    (setq completion-styles '(orderless basic))
    (setq completion-category-defaults nil)
    (setq completion-category-overrides nil))
#+END_SRC
*** savehist
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-minibuffer.el
  (use-package savehist
    :ensure nil ; it is built-in
    :hook (after-init . savehist-mode))
#+END_SRC
*** which-key
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-minibuffer.el
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC
*** provide
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-minibuffer.el
  (provide 'keenban-minibuffer)
#+END_SRC
** programming
*** git
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-git.el
  (use-package magit
    :ensure t)

  (provide 'keenban-git)
#+END_SRC
*** colourful
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-prog.el
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))

  (provide 'keenban-prog)
#+END_SRC
** custom
*** quick edit
first, define functions to open important files
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-edit.el
  (defun open-init-file () (interactive) (find-file "~/.emacs.d/keenban.org"))
  (defun open-xinitrc () (interactive) (find-file "~/.xinitrc"))
  (defun open-bashrc () (interactive) (find-file "~/.bashrc"))
#+END_SRC
now set keybindings to execute these functions
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-edit.el
  (global-set-key (kbd "C-c e i") 'open-init-file)
  (global-set-key (kbd "C-c e x") 'open-xinitrc)
  (global-set-key (kbd "C-c e b") 'open-bashrc)
#+END_SRC
now provide
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-edit.el
    (provide 'keenban-edit)
#+END_SRC
* general configuration
** user interface
*** faces
**** default
#+BEGIN_SRC emacs-lisp :tangle init.el
  (set-face-attribute 'default nil :family "Monospace")
  (set-face-attribute 'default nil :height 160)
#+END_SRC
*** fullscreen
#+BEGIN_SRC emacs-lisp :tangle init.el
  (toggle-frame-fullscreen)
#+END_SRC 
*** scratch buffer
#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq initial-scratch-message "")
#+END_SRC 
*** startup message
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; Hide advertisement from minibuffer
  (defun display-startup-echo-area-message () )
#+END_SRC 
** custom file
move the custom file to a seperate file in emacs directory
this allows the init.el to be tangled to without overwriting custom set options
#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq custom-file (expand-file-name "~/.emacs.d/custom.el"))
  (load custom-file)
#+END_SRC
** keybinds
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; taken from mastering emacs
  ;; easier to switch with 2 keys
  (global-set-key (kbd "M-o") 'other-window)
#+END_SRC
** load modules
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; add custom module directory to load path
  (add-to-list 'load-path (expand-file-name "~/.emacs.d/keenban/"))
#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; load files from custom directory
  (require 'keenban-denote)
  (require 'keenban-edit)
  (require 'keenban-git)
  (require 'keenban-mail)
  (require 'keenban-media)
  (require 'keenban-minibuffer)
  (require 'keenban-org)
  (require 'keenban-prog)
#+END_SRC
** startup performance
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; taken from emacs from scratch
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                       (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+END_SRC
