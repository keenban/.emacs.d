#+title: My Emacs Configuration
#+author: Keenan Salandy
#+PROPERTY: header-args :mkdirp yes
* Early Initialization

When I start Emacs, I want it to be as blank as possible.  This is
because I find additional noise to distract from what I am immediately
trying to do.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
  (setq inhibit-splash-screen t
        inhibit-startup-screen t
        inhibit-startup-message t
        inhibit-startup-echo-area-message t
        inhibit-startup-buffer-menu t
        menu-bar-mode nil
        tool-bar-mode nil
        tooltip-mode nil)
  (set-scroll-bar-mode nil)
#+END_SRC

* Utilities
** System

This section contains modules for all of my Emacs integrations with
the external system.  The system this is built for is GNU/Linux, and
all features are untested on other operating systems.

*** Window Manager

At times, I like to launch directly into Emacs when I start my
graphical session.  This is where EXWM comes into play. I can start my
X Server and load into Emacs.  This gives me the power of controlling
other windows (terminal emulator, signal-desktop, and web browser)
through the unified interface of Emacs. It comes with the additional
benefit of a shared kill ring across all of my programs.

#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-window.el
  (use-package exwm
    ;; Do not try to install EXWM if it is not found.
    :ensure nil
    
    :config
    ;; Set the initial workspace number.
    (setq exwm-workspace-number 1)

    ;; Make class name the buffer name.
    (add-hook 'exwm-update-class-hook
  	    (lambda () (exwm-workspace-rename-buffer exwm-class-name)))

    ;; Passthrough some keys to Emacs
    (setq exwm-input-prefix-keys
  	'(?\C-x
  	  ?\C-u
  	  ?\C-h
  	  ?\M-x
  	  ?\M-`
  	  ?\M-&
  	  ?\M-:
  	  ?\C-\M-j  ;; Buffer list
  	  ?\C-\ ))  ;; Ctrl+Space
    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

    ;; Define workspace management keys
    (setq exwm-input-global-keys
  	`(([?\s-r] . exwm-reset) ;; s-r: Reset (to line-mode).
  	  ([?\s-w] . exwm-workspace-switch) ;; s-w: Switch workspace.
  	  ([?\s-&] . (lambda (cmd) ;; s-&: Launch application.
  			 (interactive (list (read-shell-command "$ ")))
  			 (start-process-shell-command cmd nil cmd)))
  	  ([?\s-f] . (lambda () ;; s-f: Launch firefox.
  			 (interactive)
  			 (start-process-shell-command "firefox-bin" nil "firefox-bin")))
  	  ([?\s-t] . (lambda () ;; s-t: Launch terminal.
  			 (interactive)
  			 (start-process-shell-command "st" nil "st")))
  	    ;; s-N: Switch to certain workspace.
  	    ,@(mapcar (lambda (i)
  		`(,(kbd (format "s-%d" i)) .
  	      (lambda ()
  				  (interactive)
  		(exwm-workspace-switch-create ,i))))
  	      (number-sequence 0 9))))
    
    ;; Define brightness adjustment keys.
    (exwm-input-set-key (kbd "<XF86MonBrightnessDown>")
  		(lambda () (interactive) (shell-command "xbacklight -dec 5")))
    (exwm-input-set-key (kbd "<XF86MonBrightnessUp>")
  		(lambda () (interactive) (shell-command "xbacklight -inc 5")))

    ;; Define volume adjustment keys.
    (exwm-input-set-key (kbd "<XF86AudioLowerVolume>")
  		(lambda () (interactive) (shell-command "pactl set-sink-volume @DEFAULT_SINK@ -5%")))
    (exwm-input-set-key (kbd "<XF86AudioRaiseVolume>")
  		(lambda () (interactive) (shell-command "pactl set-sink-volume @DEFAULT_SINK@ +5%")))
    (exwm-input-set-key (kbd "<XF86AudioMute>")
  		(lambda () (interactive) (shell-command "pactl set-sink-mute @DEFAULT_SINK@ toggle")))

    ;; Start EXWM.
    (exwm-wm-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-window.el
  ;; make module available to emacs
  (provide 'keenban-window)
#+END_SRC

*** Media

emms configuration for using emacs to play with mpv and mpd
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-media.el
  (use-package emms
    :ensure t
    :config
    (emms-all)
    (setq emms-player-list '(emms-player-mpv)
  	  emms-info-functions '(emms-info-native)))
#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-media.el
    (provide 'keenban-media)
#+END_SRC

*** Files
Here lays my configuration of the default file manager in Emacs:
Dired.

I prefer Dired to show sizes in a human readable format (128K) rather
than in bytes.
#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq-default dired-listing-switches "--all --color=auto --human-readable -l")
#+END_SRC

When using dired, I like to be able to open media files directly with
mpv or mpd.
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; Set default program for opening media in dired
  (setq dired-guess-shell-alist-user
        '(("\\.mkv" "mpv")
  	("\\.mp4" "mpv")
  	("\\.webm" "mpv")
  	("\\.flac" "mpd")
  	("\\.mp3" "mpd")
  	("\\.ogg" "mpd")))
#+END_SRC 
** Communication
This section contains my communication modules.
*** Mail
This is my configuration of mu4e, a mail client for Emacs.
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-mail.el
  (use-package mu4e
    :ensure nil
    :load-path "/usr/share/emacs/site-lisp/mu4e/"

    :config
    ;; this is set to 't' to avoid mail syncing issues when using mbsync
    (setq mu4e-change-filenames-when-moving t)

    ;; refresh mail using isync every 10 minutes
    (setq mu4e-update-interval (* 10 60))
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-maildir "~/.mail/gmail")

    ;; set folders
    (setq mu4e-drafts-folder "/[Gmail]/Drafts")
    (setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
    (setq mu4e-refile-folder "/[Gmail]/All Mail")
    (setq mu4e-trash-folder  "/[Gmail]/Trash")

    ;; mailbox shortcuts
    (setq mu4e-maildir-shortcuts
  	'(("/Inbox"             . ?i)
	    ("/[Gmail]/Sent Mail" . ?s)
	    ("/[Gmail]/Trash"     . ?t)
	    ("/[Gmail]/Drafts"    . ?d)
	    ("/[Gmail]/All Mail"  . ?a)))
    :bind
    ("C-c m" . mu4e))

  (provide 'keenban-mail)
#+END_SRC
*** News
Newsticker is a built-in news reader (gnus so complicated)
#+BEGIN_SRC emacs-lisp
  (setq newsticker-url-list
        '(("WSJ Opinion" "https://feeds.content.dowjones.io/public/rss/RSSOpinion")
  	("WSJ World News" "https://feeds.content.dowjones.io/public/rss/RSSWorldNews")
  	("Ruslan's Tech Blog" "https://codelearn.me/feed.xml")))
#+END_SRC
*** IRC
This section contains all of the configuration for my Emacs IRC
environment.

Here we will require "erc", one of two built-in IRC clients in Emacs.
In order to utilize the automatic nickserv identification
fucntionalities, we will have to bring in erc-services as an erc
module.  Further, we should require auth-source in order to read
encrypted credentials that may be needed by other IRC bots.
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-irc.el
  ;; basic requirements for irc, and credential authentication
  (require 'erc)
  (require 'erc-services)
  (require 'auth-source)

  ;; Use services for authentication
  (add-to-list 'erc-modules 'services)
  (erc-update-modules)
#+END_SRC

We will now configure the automatic NickServ identification, and allow
it to recognize various formats provided by different servers.
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-irc.el
  ;; disable nickserv prompt
  (setq erc-prompt-for-nickserv-password nil)

  ;; use ~/.authsource.gpg for credentials
  (setq erc-use-auth-source-for-nickserv-password t)

  ;; recognize GGn NickServ bot
  (add-to-list 'erc-nickserv-alist 
                   '(GGn "NickServ!services@services.gazellegames.net" nil "NickServ" "IDENTIFY" nil nil "Password accepted - you are now recognized."))
#+END_SRC

Some IRC Servers contain additional verification past NickServ. This
allows any further IRC bot to be authenticated with credentials loaded
from ~/.authinfo.gpg.
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-irc.el
  (defun my/irc-login (network nick)
    "Send ENTER command to Vertigo after successful NickServ identification."
    (when (eq network 'GGn)
      (let* ((creds (auth-source-search :host "irc.gazellegames.net"
                                        :user "Vertigo"
                                        :require '(:secret)
                                        :max 1))
             (secret (when creds (plist-get (car creds) :secret))))
        (when secret
          (erc-server-send 
           (format "PRIVMSG Vertigo :ENTER #gazellegames %s %s" 
                   nick 
                   (if (functionp secret) (funcall secret) secret)))))))

  (add-hook 'erc-nickserv-identified-hook #'my/irc-login)
#+END_SRC

Messages about users entering and leaving the chat tend to be
bothersome to me. I prefer to hide the messages entirely.
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-irc.el
  ;; hide these messages
  (setq erc-hide-list '("JOIN" "PART" "QUIT"))
#+END_SRC

I like to join specific servers regularly. In order to make it easier
for myself, I like to set keybinds and define functions to connect to
the server.
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-irc.el
  ;; define user function to join server
  (defun my/irc-ggn () 
    (interactive) 
    (erc-tls :server "irc.gazellegames.net" :port 7000))

  (defun my/irc-libera ()
    (interactive)
    (erc-tls :server "irc.libera.chat" :port 6697))

  ;; set key binding
  (global-set-key (kbd "C-c i g") #'my/irc-ggn)
  (global-set-key (kbd "C-c i l") #'my/irc-libera)
#+END_SRC

When I join servers, I would like to automatically enter the channels
that are relevant to me.
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-irc.el
  (setq erc-autojoin-channels-alist '((Libera.Chat "#emacs" "#erc")))
#+END_SRC 

In order for this module to be visible to Emacs, we must announce it
as a feature.
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-irc.el
  (provide 'keenban-irc)
#+END_SRC

** Org
Org mode is the apex of human invention. Here is my configuration.
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-org.el
  (use-package org
    :ensure nil
    :defer t
    :mode ("\\.org\\'" . org-mode)
    :bind
    (("C-c l" . org-store-link)
     ("C-c a" . org-agenda))
    :config
    (setq
     ;; start collapsed
     org-startup-folded t

     ;; respect headings
     org-insert-heading-respect-content t)

    ;; edit header faces
    (set-face-attribute 'org-document-title nil :height 1.75 :weight 'heavy)
    (set-face-attribute 'org-level-1 nil :height 1.5 :weight 'bold)
    (set-face-attribute 'org-level-2 nil :height 1.375 :weight 'bold)
    (set-face-attribute 'org-level-3 nil :height 1.25 :weight 'bold)
    (set-face-attribute 'org-level-4 nil :height 1.125 :weight 'bold)
    (set-face-attribute 'org-level-5 nil :weight 'bold)

    ;; hide leading stars in header
    (setq org-hide-leading-stars t)

    (setq org-log-done t)
    (setq org-agenda-files '("~/media/doc/notes/20250707T180240--agenda__agenda.org"))
    (define-abbrev org-mode-abbrev-table "myel" "#+BEGIN_SRC emacs-lisp")
    (define-abbrev org-mode-abbrev-table "mysh" "#+BEGIN_SRC shell")
    (define-abbrev org-mode-abbrev-table "myend" "#+END_SRC"))

  (provide 'keenban-org)
#+END_SRC
*** Denote
Thank you protesilaos for denote. I tried to understand Org Roam but I
am too dumb.
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-denote.el
  (use-package denote
    :ensure t
    :hook (dired-mode . denote-dired-mode)
    :bind
    (("C-c n n" . denote)
     ("C-c n r" . denote-rename-file)
     ("C-c n l" . denote-link)
     ("C-c n b" . denote-backlinks)
     ("C-c n d" . denote-dired)
     ("C-c n g" . denote-grep))
    :config
    (setq denote-directory (expand-file-name "~/media/doc/notes/"))
    (setq denote-rename-confirmations nil)
    (denote-rename-buffer-mode 1))
  (use-package denote-org
    :ensure t)

  (provide 'keenban-denote)
#+END_SRC
** Minibuffer
taken from protesilaos basic configuration
*** Vertico
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-minibuffer.el
  (use-package vertico
    :ensure t
    :hook (after-init . vertico-mode))
#+END_SRC
*** Marginalia
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-minibuffer.el
  (use-package marginalia
    :ensure t
    :hook (after-init . marginalia-mode))
#+END_SRC
*** Orderless
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-minibuffer.el
  (use-package orderless
    :ensure t
    :config
    (setq completion-styles '(orderless basic))
    (setq completion-category-defaults nil)
    (setq completion-category-overrides nil))
#+END_SRC
*** Savehist
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-minibuffer.el
  (use-package savehist
    :ensure nil ; it is built-in
    :hook (after-init . savehist-mode))
#+END_SRC
*** Which-Key
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-minibuffer.el
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC
*** Provide
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-minibuffer.el
  (provide 'keenban-minibuffer)
#+END_SRC
** Programming
*** Git
Magit is like the gates to heaven. I did not use version control
enough before magit.  Now, it's just too easy.
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-git.el
  (use-package magit
    :ensure t)

  (provide 'keenban-git)
#+END_SRC
*** Colourful
When editing emacs lisp, it's nice to have different colours for
different list levels. This assists in keeping track of which level
you are nested into at any given time.
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-prog.el
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))

  (provide 'keenban-prog)
#+END_SRC
** Reader
#+BEGIN_SRC emacs-lisp :tangle keenban/reader.el
  (use-package nov
    :vc (:url "https://depp.brause.cc/nov.el.git")
    :config
    (setq nov-text-width 70)
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+END_SRC 
** Consult
#+BEGIN_SRC emacs-lisp :tangle init.el
  (require 'consult)

  ;; Replace C-x b
  (define-key (current-global-map) [remap switch-to-buffer] 'consult-buffer)

  ;; Replace C-x l
  (define-key (current-global-map) [remap count-lines-page] 'consult-line)
#+END_SRC
** Custom
*** Quick Edit
first, define functions to open important files
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-edit.el
  (defun open-init-file () (interactive) (find-file "~/.emacs.d/keenban.org"))
  (defun open-xinitrc () (interactive) (find-file "~/.xinitrc"))
  (defun open-bashrc () (interactive) (find-file "~/.bashrc"))
  (defun open-vids () (interactive) (dired "~/media/vid"))
#+END_SRC
now set keybindings to execute these functions
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-edit.el
  (global-set-key (kbd "C-c e i") 'open-init-file)
  (global-set-key (kbd "C-c e x") 'open-xinitrc)
  (global-set-key (kbd "C-c e b") 'open-bashrc)
#+END_SRC
now provide
#+BEGIN_SRC emacs-lisp :tangle keenban/keenban-edit.el
    (provide 'keenban-edit)
#+END_SRC
* General Configuration
This section contains all of my general Emacs configuration.
** Theme
#+BEGIN_SRC emacs-lisp :tangle init.el
  (load-theme 'modus-vivendi-tinted)
#+END_SRC 
*** Scratch Buffer
** Faces
#+BEGIN_SRC emacs-lisp :tangle init.el
  (set-face-attribute 'default nil :height 160)
#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq initial-scratch-message "")
#+END_SRC 
*** Startup Message
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; Hide advertisement from minibuffer
  (defun display-startup-echo-area-message () )
#+END_SRC 
*** Pinentry
#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq epa-pinentry-mode 'loopback)
#+END_SRC

** Modeline
#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq display-time-format "%R")
  (setq display-time-24hr-format t)
  (setq display-time-default-load-average nil)
  (display-time-mode t)
  (display-battery-mode t)

    (setq-default mode-line-format
                  '("%e"
                    my-modeline-buffer-name
            	" %* "
            	my-modeline-major-mode
            	mode-line-format-right-align
    		my-modeline-misc))

    (defvar-local my-modeline-misc
        '(:eval
          (when (mode-line-window-selected-p)
    	mode-line-misc-info)))

    (put 'my-modeline-misc 'risky-local-variable t)

    (put 'my-modeline-time 'risky-local-variable t)

    (defvar-local my-modeline-buffer-name
        '(:eval
          (when (mode-line-window-selected-p)
            (propertize
    	 (format " %s " (buffer-name))
    	 'face 'my-modeline-face))))

    (put 'my-modeline-buffer-name 'risky-local-variable t)

    (defvar-local my-modeline-major-mode
      '(:eval (propertize 
               (capitalize 
                (replace-regexp-in-string "-mode$" "" 
                 (symbol-name major-mode)))
               'face 'bold)))

    (put 'my-modeline-major-mode 'risky-local-variable t)

    (setq mode-line-right-align-edge 'right-fringe)

    (defface my-modeline-face
      '((t :background "#5f509f" :foreground "white" :inherit bold :box "000000"))
      "Face with a lavender background for use on the mode line.")

#+END_SRC
** Custom File
move the custom file to a seperate file in emacs directory this allows
the init.el to be tangled to without overwriting custom set options
#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq custom-file (expand-file-name "~/.emacs.d/custom.el"))
  (load custom-file)
#+END_SRC
** Keybinds

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; taken from mastering emacs
  ;; easier to switch with 2 keys
  (global-set-key (kbd "M-o") 'other-window)
#+END_SRC

The default list-buffers menu bound to C-x C-b is dramatically
improved upon by the ibuffer menu.
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; replace C-x C-b with ibuffer
  (define-key (current-global-map) [remap list-buffers] 'ibuffer)
#+END_SRC
** Load Modules
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; add custom module directory to load path
  (add-to-list 'load-path (expand-file-name "~/.emacs.d/keenban/"))
#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; load files from custom directory
  (require 'keenban-denote)
  (require 'keenban-edit)
  (require 'keenban-git)
  (require 'keenban-mail)
  (require 'keenban-media)
  (require 'keenban-minibuffer)
  (require 'keenban-org)
  (require 'keenban-prog)
  (require 'keenban-irc)
#+END_SRC
** Startup Performance
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; taken from emacs from scratch
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                       (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+END_SRC
